#!/usr/bin/env python3

###################################################
# SALTED-SWEEPER SCRIPT                           #
# Script to identify and delete old temporary and #
# log files to free up space.                     #
# Created by Matthew Boucher on 2024-05-13        #
###################################################

import os
import sys
import time
import math
import subprocess

def convert_size(size_bytes):
    """
    Convert file size from bytes to a more human-readable format.
    """
    if size_bytes == 0:
        return "0B"
    size_name = ("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    return "%s %s" % (s, size_name[i])

def convert_age(age_seconds):
    """
    Convert file age from seconds to a more human-readable format.
    """
    if age_seconds < 60:
        return f"{age_seconds:.2f} seconds"
    elif age_seconds < 3600:
        return f"{age_seconds/60:.2f} minutes"
    elif age_seconds < 86400:
        return f"{age_seconds/3600:.2f} hours"
    else:
        return f"{age_seconds/86400:.2f} days"

def find_old_files(root_dir, extensions, max_age_days, min_size_bytes):
    """
    Recursively search for files with specified extensions in the given root directory.
    Yield file details including name, size, age, and location if they are over max_age_days old and exceed min_size_bytes.
    """
    for root, dirs, files in os.walk(root_dir):
        # Skip /nethome directory
        if root.startswith('/nethome'):
            continue
        for file_name in files:
            file_path = os.path.join(root, file_name)
            if any(file_name.endswith(ext) for ext in extensions):
                # Get file size
                size = os.path.getsize(file_path)
                # Get file age
                age_seconds = time.time() - os.path.getmtime(file_path)
                age_readable = convert_age(age_seconds)
                # Check if file is over max_age_days old and exceeds min_size_bytes
                if age_seconds > max_age_days * 24 * 3600 and size > min_size_bytes:
                    yield file_name, file_path, size, age_readable

def main():
    """
    Main function to handle the file search and deletion process.
    """
    root_dir = '/'  # Start searching from the root directory
    file_extensions = ['.tmp', '.log']
    max_age_days = 100
    min_size_bytes = 100 * 1024 * 1024  # 100MB
    
    print(f"Searching for {', '.join(file_extensions)} files older than {max_age_days} days and larger than 100MB...")
    old_files = list(find_old_files(root_dir, file_extensions, max_age_days, min_size_bytes))

    if not old_files:
        print("No old files found.")
        return

    print(f"Found {len(old_files)} files that are older than {max_age_days} days and larger than 100MB:")
    for file_name, file_path, size, age_readable in old_files:
        print(f"File: {file_path}, Size: {convert_size(size)}, Age: {age_readable}")
    
    if input("Do you want to delete these files? (y/n): ").lower() == 'y':
        for file_name, file_path, _, _ in old_files:
            try:
                subprocess.run(['sudo', 'rm', file_path])
                print(f"Deleted: {file_path}")
            except Exception as e:
                print(f"Failed to delete {file_path}: {e}", file=sys.stderr)
    else:
        print("No files were deleted.")

if __name__ == "__main__":
    main()

