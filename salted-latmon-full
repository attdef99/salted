#!/usr/bin/env python3

###################################
# SALTED-LATMON-FULL SCRIPT       #
# Checks system latency every 5   #
# seconds for 60 seconds and      #
# reports system health based on  #
# latency.                        #
# created by Matthew Boucher      #
# 2024-05-22                      #
###################################

import subprocess
import time
import socket

def get_hostname():
    return socket.gethostname()

def check_latency():
    try:
        result = subprocess.run(
            ["ping", "-c", "1", "130.207.160.15"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True
        )
        if result.returncode == 0:
            output = result.stdout.split('\n')
            for line in output:
                if "time=" in line:
                    latency = line.split('time=')[1].split(' ')[0]
                    return float(latency)
        return None
    except Exception as e:
        print(f"Error checking latency: {e}")
        return None

def main():
    hostname = get_hostname()
    report_lines = [f"Checking latency for hostname: {hostname} for 60 seconds...\n"]

    start_time = time.time()
    end_time = start_time + 60  # 60 seconds
    latencies = []

    while time.time() < end_time:
        latency = check_latency()
        if latency is not None:
            latencies.append(latency)
        time.sleep(5)

    duration = time.time() - start_time

    if latencies:
        avg_latency = sum(latencies) / len(latencies)
        min_latency = min(latencies)
        max_latency = max(latencies)
        report_lines.append(f"\nAverage latency over 60 seconds: {avg_latency:.2f} ms\n")
        report_lines.append(f"Lowest latency: {min_latency:.2f} ms\n")
        report_lines.append(f"Highest latency: {max_latency:.2f} ms\n")
        if avg_latency < 50:
            report_lines.append("System Health: Good\n")
        elif avg_latency < 60:
            report_lines.append("System Health: Fair\n")
        else:
            report_lines.append("System Health: Poor\n")
            report_lines.append("Press Enter to continue...\n")
    else:
        report_lines.append("No latency data collected.\n")

    report_lines.append(f"\nDuration: {duration:.2f} seconds\n")

    with open("latency_report.txt", "w") as report_file:
        report_file.writelines(report_lines)

    # Read the report and display it to the screen
    with open("latency_report.txt", "r") as report_file:
        report_content = report_file.read()
        print(report_content)

if __name__ == "__main__":
    main()

