#!/usr/bin/env python3

###################################
# SALTED-TOPRES SCRIPT            #
# Display top 3 resource-hogging  #
# processes by CPU or Memory.     #
# created by Matthew Boucher      #
# on 2024-08-17                   #
###################################

import subprocess
import re

def get_top_processes_from_top(metric: str = 'cpu', top_n: int = 3):
    """
    Get the top 'top_n' processes sorted by the given metric (cpu or memory),
    using the 'top' command.
    :param metric: Metric to sort by ('cpu' or 'memory').
    :param top_n: Number of top processes to return.
    :return: List of tuples containing process details.
    """
    if metric not in ['cpu', 'memory']:
        raise ValueError("Metric must be either 'cpu' or 'memory'")

    # Run the 'top' command and capture its output
    cmd = ['top', '-b', '-n', '1']  # Batch mode, single iteration
    result = subprocess.run(cmd, stdout=subprocess.PIPE, universal_newlines=True)
    output = result.stdout

    # Regular expressions for parsing
    if metric == 'cpu':
        # Pattern for CPU usage
        pattern = re.compile(r'^\s*(\d+)\s+\S+\s+\S+\s+\S+\s+\S+\s+(\S+)\s+\S+\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s*(\d+\.\d+)', re.MULTILINE)
    else:  # metric == 'memory'
        # Pattern for Memory usage
        pattern = re.compile(r'^\s*(\d+)\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(\S+)\s+\S+\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s*(\d+\.\d+)', re.MULTILINE)

    # Parse the output
    processes = []
    for match in pattern.finditer(output):
        pid = int(match.group(1))
        name = match.group(2)
        if metric == 'cpu':
            usage = float(match.group(12))
        else:  # metric == 'memory'
            usage = float(match.group(12))

        processes.append({
            'pid': pid,
            'name': name,
            'cpu_percent': usage if metric == 'cpu' else None,
            'memory_percent': usage if metric == 'memory' else None
        })

    # Sort processes based on the metric
    if metric == 'cpu':
        processes = sorted(processes, key=lambda x: x['cpu_percent'], reverse=True)
    else:  # metric == 'memory'
        processes = sorted(processes, key=lambda x: x['memory_percent'], reverse=True)

    return processes[:top_n]

def display_top_processes(metric: str = 'cpu', top_n: int = 3):
    top_processes = get_top_processes_from_top(metric, top_n)
    if top_processes:
        print(f"Top {top_n} processes by {metric.capitalize()}:")
        for proc in top_processes:
            cpu_usage = proc.get('cpu_percent', 'N/A')
            mem_usage = proc.get('memory_percent', 'N/A')
            print(f"PID: {proc['pid']} | Name: {proc['name']} | "
                  f"CPU: {cpu_usage}% | Memory: {mem_usage}%")
            # Check if any process exceeds 50% usage
            if (metric == 'cpu' and cpu_usage > 50) or \
               (metric == 'memory' and mem_usage > 50):
                print("\nA process is using more than 50% "
                      f"of {metric}. Press Enter to continue...")
                input()  # Pause until user presses Enter
        return True
    return False

if __name__ == "__main__":
    cpu_displayed = display_top_processes('cpu')  # Show top 3 processes by CPU usage
    if cpu_displayed:
        print()  # Add a line break if there are CPU processes to display

    memory_displayed = display_top_processes('memory')  # Show top 3 by memory usage

    if not cpu_displayed and not memory_displayed:
        print("No processes are using more than 10% of CPU or Memory.")

