#!/usr/bin/env python3

##################################################################################
# PATCHWND SCRIPT                                                                #
# Script to determine the server's patch window based on current date and patch  #
# group assignment. Supports patch groups A, B, C, D, E, and X.                  #
# Created by Matthew Boucher - 2024-05-08                                         #
##################################################################################

import subprocess
import socket
from datetime import datetime, timedelta

def find_second_tuesday(month, year):
    date = datetime(year, month, 1)
    while date.weekday() != 1:
        date += timedelta(days=1)
    return date + timedelta(days=7)

def get_current_patch_week():
    today = datetime.now()
    second_tuesday = find_second_tuesday(today.month, today.year)
    if today < second_tuesday:
        last_month = today.month - 1 or 12
        year = today.year - 1 if last_month == 12 else today.year
        second_tuesday = find_second_tuesday(last_month, year)
    week_difference = (today - second_tuesday).days // 7
    patch_group_map = {0: 'A', 1: 'B', 2: 'C', 3: 'D', 4: 'E', 5: 'X'}
    patch_week = patch_group_map.get(week_difference, 'Out of group range')
    return patch_week, f"Current Patch week: {patch_week}."

def get_server_patch_group():
    hostname = socket.gethostname()
    cmd = f"mlist -k \"fqdn={hostname}\" patch-group"
    process = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
    output = process.stdout.strip()
    parts = output.split()
    patch_group = parts[-1] if parts else "Unknown"
    return patch_group, f"Patch Group for {hostname}: {patch_group}"

def determine_patch_window():
    current_patch_week, current_patch_week_msg = get_current_patch_week()
    server_patch_group, server_patch_group_msg = get_server_patch_group()
    patch_groups = ['A', 'B', 'C', 'D', 'E', 'X']
    if server_patch_group == 'X':
        return '\n'.join([current_patch_week_msg, server_patch_group_msg, "This system is in Patch Group X and is not patched."])
    current_index = patch_groups.index(current_patch_week)
    server_index = patch_groups.index(server_patch_group)
    if server_index == current_index:
        patch_window_status = "System's patch window is open."
    elif server_index < current_index:
        patch_window_status = "System's patch window is cracked."
    else:
        patch_window_status = "System's patch window is closed."
    return '\n'.join([current_patch_week_msg, server_patch_group_msg, patch_window_status])

print(determine_patch_window())

