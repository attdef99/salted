#!/usr/bin/env python3

#########################################################
# SALTED-BOK.NOC SCRIPT                                 #
# Summary: Checks system IP and fetches VLAN info from  #
# bok.noc.gatech.edu.                                   #
# Created by Matthew Boucher on 2024-03-26              #
#########################################################

import socket
import subprocess  # Required for running commands

def get_system_ip():
    """Fetches the system's IP address."""
    hostname = socket.gethostname()  # Get the system's hostname
    ip_address = socket.gethostbyname(hostname)  # Resolve hostname to IP address
    return ip_address

def get_subnet_mask():
    """Determines the subnet mask using ifconfig."""
    try:
        result = subprocess.run(["ifconfig"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        if result.returncode == 0:
            # Split the output of ifconfig by lines and find the line containing "netmask"
            for line in result.stdout.split('\n'):
                if "netmask" in line:
                    subnet_mask = line.split('netmask ')[1].split(' ')[0]  # Extract subnet mask
                    return subnet_mask
            print("Error: Subnet mask not found in ifconfig output.")
        else:
            print("Error running ifconfig command:")
            print(result.stderr)
    except Exception as e:
        print("Exception occurred while running ifconfig command:")
        print(str(e))
    return None

def run_curl_command(ip_address):
    """Fetches VLAN info for the given IP address using curl commands."""
    vlan_info = ""  # Initialize VLAN info variable
    vlan_description = ""  # Initialize VLAN description variable
    try:
        # Run curl command to fetch VLAN info based on IP address
        result = subprocess.run(["curl", f"https://bok.noc.gatech.edu/api/vlan_lookup.php?search={ip_address}"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        if result.returncode == 0:  # If curl command executed successfully
            # Extract VLAN info from the output of curl command
            vlan_info = result.stdout.strip().split()[1].split(':')[0]
            
            # Fetch VLAN description based on VLAN info
            vlan_description_result = subprocess.run(["curl", f"https://bok.noc.gatech.edu/api/vlan_info.php?vlan={vlan_info}&psk=30035607ee5bb378c71ab434a6d05410&format=json"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
            if vlan_description_result.returncode == 0:  # If curl command for description executed successfully
                vlan_description_data = vlan_description_result.stdout  # Get output of curl command
                # Extract VLAN description from the output
                description_info = vlan_description_data.split('"description":')[1].split(',')[0].strip('"')
                vlan_description = f"VLAN Description: {description_info}"  # Format VLAN description
            else:
                # Print error message if fetching VLAN description fails
                print("Error fetching VLAN description:")
                print(vlan_description_result.stderr)
        else:
            # Print error message if curl command fails
            print("Error running curl command:")
            print(result.stderr)
    except Exception as e:
        # Print error message if any exception occurs
        print("Exception occurred while running curl command:")
        print(str(e))
    return vlan_info, vlan_description

def check_ip_with_site(ip_address):
    """Sends the system's IP address to the specified site for checking."""
    # This function is now optional based on your updated requirements.
    pass

if __name__ == "__main__":
    system_ip = get_system_ip()  # Get system's IP address
    print(f"System IP: {system_ip}")  # Print system's IP address
    
    subnet_mask = get_subnet_mask()  # Get subnet mask
    if subnet_mask:
        print(f"Subnet Mask: {subnet_mask}")  # Print subnet mask
    
    # Run function to fetch VLAN info based on system's IP address
    vlan_info, vlan_description = run_curl_command(system_ip)
    if vlan_info:  # If VLAN info is obtained successfully
        # Print VLAN info and description
        print(f"VLAN Info: {vlan_info}")
        print(vlan_description)
    else:
        # Print error message if fetching VLAN info fails
        print("Failed to fetch VLAN information for the system IP.")

