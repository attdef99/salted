#!/usr/bin/env python3

###################################
# SALTED-SPACECHECK SCRIPT        #
# Check for disks 90% or above    #
# and handle no high usage cases  #
# Created by Matthew Boucher       #
# 2024-08-23                      #
###################################

import subprocess
import socket
import os

def get_hostname():
    """Retrieve and return the system hostname without the .gatech.edu suffix."""
    hostname = socket.gethostname()
    # Remove the .gatech.edu suffix if present
    if hostname.endswith('.gatech.edu'):
        hostname = hostname[:-len('.gatech.edu')]
    return hostname

def remove_gatech_suffix(text):
    """Remove the .gatech.edu suffix from the given text if present."""
    return text.replace('.gatech.edu', '')

def get_user_home_path():
    """Get the current user's home path and construct the path to the salted-cleanspace script."""
    user = os.getlogin()
    return f'/nethome/{user}/bon/salted/salted-cleanspace'

def trigger_cleanup_script():
    """Trigger the salted-cleanspace script in the background using &."""
    script_path = get_user_home_path()
    try:
        subprocess.Popen(f'{script_path} &', shell=True)
        print("Triggered salted-cleanspace script in the background.")
    except Exception as e:
        print(f"Failed to trigger cleanup script: {e}")

def check_disk_usage():
    """Check disk usage and display filesystems 90% or above, removing .gatech.edu suffixes."""
    # Run the df -h command
    result = subprocess.run(['df', '-h'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
    
    # Check if there was an error in running the command
    if result.returncode != 0:
        print("Error executing df -h:")
        print(result.stderr)
        return

    # Split the output into lines
    lines = result.stdout.strip().split("\n")

    # Print header to match the df -h format
    print(f"{'Filesystem':<30} {'Size':<10} {'Used':<10} {'Avail':<10} {'Use%':<7} {'Mounted on'}")

    cleanup_triggered = False
    root_info = None

    # Check each line for usage at 90% or above
    for line in lines[1:]:  # Skip the header line
        columns = line.split()
        if len(columns) >= 6:
            filesystem = remove_gatech_suffix(columns[0])
            size = columns[1]
            used = columns[2]
            avail = columns[3]
            usage = columns[4]
            mounted_on = remove_gatech_suffix(" ".join(columns[5:]))  # Handle cases where the mount point has spaces
            
            # Save root (/) information for later use if needed
            if mounted_on == "/":
                root_info = f"{filesystem:<30} {size:<10} {used:<10} {avail:<10} {usage:<7} {mounted_on}"
            
            # Check if the usage percentage is 90% or above
            if usage.endswith('%') and int(usage[:-1]) >= 90:
                print(f"{filesystem:<30} {size:<10} {used:<10} {avail:<10} {usage:<7} {mounted_on}")
                cleanup_triggered = True

    if cleanup_triggered:
        # Pause and wait for user input if any filesystem is 90% or above
        input("\nOne or more filesystems are at or above 90% usage. Press Enter to continue...")
        trigger_cleanup_script()
    else:
        # If no filesystems are 90% or above, display root (/) information
        if root_info:
            print(root_info)
        print("No filesystems were found at or above 90% usage.")

if __name__ == "__main__":
    # Display the hostname
    hostname = get_hostname()
    print(f"Hostname: {hostname}\n")

    # Run the disk usage check
    check_disk_usage()

